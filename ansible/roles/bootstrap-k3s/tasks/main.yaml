- name: download k3s
  get_url:
    url: https://get.k3s.io
    dest: /tmp/k3s_install.sh
    mode: 0755
    force: true

- name: run  k3s install
  command: "/tmp/k3s_install.sh --write-kubeconfig-mode 644 --disable traefik --disable servicelb"
  register: k3s

- name: create .kube directory
  file:
    path: "{{ item.file }}"
    state: directory
    mode: 0755
    owner: "{{ item.user }}"
    group: "{{ item.user }}"
  with_items:
    - {file: "~/.kube", user: "root"} 
    - {file: "/home/{{ ansible_user }}/.kube", user: "{{ ansible_user }}"}

- name: copy kubectl config
  copy:
    src: /etc/rancher/k3s/k3s.yaml 
    dest: "{{ item.file }}"
    remote_src: yes
    mode: 0600
    owner: "{{ item.user }}"
    group: "{{ item.user }}"
  with_items:
    - {file: "~/.kube/config", user: "root"} 
    - {file: "/home/{{ ansible_user }}/.kube/config", user: "{{ ansible_user }}"}

- debug:
    msg: "{{ k3s.stdout_lines }}"

- name: Add stable chart repo
  kubernetes.core.helm_repository:
    name: "{{ item.name }}"
    repo_url: "{{ item.url }}"
  with_items: 
    - {name: 'metallb', url: 'https://metallb.github.io/metallb'}
    - {name: 'rancher-stable', url: 'https://releases.rancher.com/server-charts/stable'}
    - {name: 'jetstack', url: 'https://charts.jetstack.io'}
    - {name: 'nginx', url: 'https://kubernetes.github.io/ingress-nginx'}
    - {name: 'longhorn', url: 'https://charts.longhorn.io'}

- name: install metallb
  kubernetes.core.helm:
    name: metallb 
    chart_ref: metallb/metallb
    wait: true
    release_namespace: metallb-system
    update_repo_cache: true
    create_namespace: true
    values:
      configInline:
        address-pools:
        - name: default
          protocol: layer2
          addresses:
          - "{{ ansible_host }}/32" 
          - "{{ ipv6_address }}"


- name: install nginx-ingress
  kubernetes.core.helm:
    name: ingress-nginx 
    chart_ref: nginx/ingress-nginx
    wait: true
    release_namespace: ingress-nginx
    create_namespace: true
    values:
      controller:
        service:
          annotations:
            metallb.universe.tf/allow-shared-ip: default-svc
          externalTrafficPolicy: Cluster

- name: Deploy cert-manager
  kubernetes.core.helm:
    name: certmgr
    chart_ref: jetstack/cert-manager
    release_namespace: cert-manager
    wait: true
    create_namespace: true
    chart_version: v1.7.1
    values:
      installCRDs: true

- name: Deploy longhorn
  kubernetes.core.helm:
    name: longhorn
    chart_ref: longhorn/longhorn
    release_namespace: longhorn-system
    create_namespace: true
    wait: true
    values:
      persistence:
        defaultClassReplicaCount: 1

- name: Create a k8s namespace
  kubernetes.core.k8s:
    name: apps
    api_version: v1
    kind: Namespace
    state: present

- name: Create prod cert issuer in the apps namespace
  kubernetes.core.k8s:
    state: present
    namespace: apps
    definition:
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: letsencrypt-prod
      spec:
        acme:
          # The ACME server URL
          server: https://acme-v02.api.letsencrypt.org/directory
          # Email address used for ACME registration
          email: "{{ cert_manager_email }}"
          # Name of a secret used to store the ACME account private key
          privateKeySecretRef:
            name: letsencrypt-prod
          # Enable the HTTP-01 challenge provider
          solvers:
          - http01:
              ingress:
                class: nginx

- name: Create staging cert issuer in the apps namespace
  kubernetes.core.k8s:
    state: present
    namespace: apps
    definition:
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: letsencrypt-staging
      spec:
        acme:
          # The ACME server URL
          server: https://acme-staging-v02.api.letsencrypt.org/directory
          # Email address used for ACME registration
          email: "{{ cert_manager_email }}"
          # Name of a secret used to store the ACME account private key
          privateKeySecretRef:
            name: letsencrypt-staging
          # Enable the HTTP-01 challenge provider
          solvers:
          - http01:
              ingress:
                class:  nginx
